// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, token])
  @@map("verification_token")
}

model User {
  id            Int        @id @default(autoincrement())
  uid           String     @unique @default(uuid()) @db.Uuid
  email         String     @unique
  firstName     String     @map("first_name")
  lastName      String     @map("last_name")
  emailVerified DateTime?  @map("email_verified") @db.Timestamptz
  status        userStatus @default(created)

  cases    CaseOnUser[]
  comments Comment[]
  roles    RolesOnUsers[]
  files    File[]

  @@map("user")
}

model Role {
  id          Int        @id @default(autoincrement())
  uid         String     @unique @default(uuid()) @db.Uuid
  status      roleStatus @default(active)
  name        String     @unique
  displayName String     @map("display_name")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamptz

  users RolesOnUsers[]

  @@map("role")
}

model RolesOnUsers {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("roles_on_users")
}

model Case {
  id          Int        @id @default(autoincrement())
  uid         String     @unique @default(uuid()) @db.Uuid
  title       String
  destination String?
  description String?
  status      CaseStatus @default(waiting)
  clientId    Int?       @map("client_id")
  opponentId  Int?       @map("opponent_id")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  users    CaseOnUser[]
  comments Comment[]
  client   Client?      @relation(fields: [clientId], references: [id])
  opponent Opponent?    @relation(fields: [opponentId], references: [id])
  files    File[]

  @@map("case")
}

model CaseOnUser {
  caseId    Int          @map("case_id")
  userId    Int          @map("user_id")
  status    AccessStatus @default(active)
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  case Case @relation(fields: [caseId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([caseId, userId])
  @@map("case_on_user")
}

model Client {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid()) @db.Uuid
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  name      String?
  email     String?
  phone     String?
  address   String?
  other     String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  case      Case[]

  @@map("client")
}

model Opponent {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid()) @db.Uuid
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  name      String?
  email     String?
  phone     String?
  address   String?
  other     String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  Case Case[]

  @@map("opponent")
}

model Comment {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(uuid()) @db.Uuid
  content   String
  caseId    Int      @map("case_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  case Case @relation(fields: [caseId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("comment")
}

model File {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(uuid()) @db.Uuid
  name       String
  path       String
  caseId     Int      @map("case_id")
  uploadedBy Int      @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  case Case @relation(fields: [caseId], references: [id])
  user User @relation(fields: [uploadedBy], references: [id])

  @@map("file")
}

enum userStatus {
  created
  active
  inactive
  deleted
}

enum roleStatus {
  active
  inactive
}

enum CaseStatus {
  waiting
  inProgress
  done
}

enum AccessStatus {
  active
  inactive
}
